<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Accounts" xml:space="preserve">
    <value>Accounts</value>
  </data>
  <data name="AccountsAreNull" xml:space="preserve">
    <value>Accounts are null.</value>
  </data>
  <data name="BackToList" xml:space="preserve">
    <value>Back to List</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Category" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="ChangePassword" xml:space="preserve">
    <value>Change Password</value>
  </data>
  <data name="ConfirmDelete" xml:space="preserve">
    <value>Confirm Delete</value>
  </data>
  <data name="CurrentPassword" xml:space="preserve">
    <value>Current Password</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="DeleteAccount" xml:space="preserve">
    <value>Delete Account</value>
  </data>
  <data name="DeleteProduct" xml:space="preserve">
    <value>Delete Product</value>
  </data>
  <data name="DeletetThisEntry" xml:space="preserve">
    <value>Are you sure you want to delete this entry</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Details" xml:space="preserve">
    <value>Details</value>
  </data>
  <data name="Don'tYouHaveAnAccount" xml:space="preserve">
    <value>Don't you have an account?</value>
  </data>
  <data name="Down" xml:space="preserve">
    <value>Down</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="EditAccount" xml:space="preserve">
    <value>EditAccount</value>
  </data>
  <data name="EditPassword" xml:space="preserve">
    <value>EditPassword</value>
  </data>
  <data name="EditProduct" xml:space="preserve">
    <value>Edit Product</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="EmailConfirmed" xml:space="preserve">
    <value>Email Confirmed</value>
  </data>
  <data name="EmailIsTooShort" xml:space="preserve">
    <value>Email is too short</value>
  </data>
  <data name="English" xml:space="preserve">
    <value>English</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="ErrorMessage" xml:space="preserve">
    <value>Request error.</value>
  </data>
  <data name="ErrorMessagePassword" xml:space="preserve">
    <value>Minimum length 6 and must contain  1 Uppercase,1 lowercase, 1 special character and 1 digit</value>
  </data>
  <data name="ErrorOnLoggingIn" xml:space="preserve">
    <value>Error on logging in.</value>
  </data>
  <data name="Filtering" xml:space="preserve">
    <value>Filtering</value>
  </data>
  <data name="FilteringProducts" xml:space="preserve">
    <value>Filtering Products</value>
  </data>
  <data name="FirstName" xml:space="preserve">
    <value>FirstName</value>
  </data>
  <data name="FirstNameIsTooShort" xml:space="preserve">
    <value>FirstName is too short</value>
  </data>
  <data name="HaveAlreadyAnAccount" xml:space="preserve">
    <value>Have already an account?</value>
  </data>
  <data name="Home" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="Image" xml:space="preserve">
    <value>Image</value>
  </data>
  <data name="InsertProduct" xml:space="preserve">
    <value>Insert Product</value>
  </data>
  <data name="InvalidLogin" xml:space="preserve">
    <value>Invalid Login.</value>
  </data>
  <data name="InvalidPassword" xml:space="preserve">
    <value>Invalid Password.</value>
  </data>
  <data name="LastName" xml:space="preserve">
    <value>LastName</value>
  </data>
  <data name="LastNameIsTooShort" xml:space="preserve">
    <value>LastName is too short</value>
  </data>
  <data name="Login" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="LoginIsTooShort" xml:space="preserve">
    <value>Login is too short</value>
  </data>
  <data name="LoginSuccessfully" xml:space="preserve">
    <value>Logged in successfully.</value>
  </data>
  <data name="Logout" xml:space="preserve">
    <value>Logout</value>
  </data>
  <data name="NewPassword" xml:space="preserve">
    <value>New Password</value>
  </data>
  <data name="NotAccount" xml:space="preserve">
    <value>There is no such account.</value>
  </data>
  <data name="NotProduct" xml:space="preserve">
    <value>There is no such product.</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="PasswordConfirm" xml:space="preserve">
    <value>Password Confirm</value>
  </data>
  <data name="PasswordConfirmError" xml:space="preserve">
    <value>Error in confirming the password</value>
  </data>
  <data name="PasswordIsTooShort" xml:space="preserve">
    <value>Password is too short.</value>
  </data>
  <data name="PasswordUpdated" xml:space="preserve">
    <value>Password has updated successfully.</value>
  </data>
  <data name="PasswordUpdateError" xml:space="preserve">
    <value>Password update error.</value>
  </data>
  <data name="PhoneNumber" xml:space="preserve">
    <value>Phone Number</value>
  </data>
  <data name="PleaseSignIn" xml:space="preserve">
    <value>Please SignIn</value>
  </data>
  <data name="PleaseSignUp" xml:space="preserve">
    <value>Please SignUp</value>
  </data>
  <data name="Price" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="ProductAddedSuccessfully" xml:space="preserve">
    <value>Product added successfully.</value>
  </data>
  <data name="ProductByThatNameAlreadyExists" xml:space="preserve">
    <value>A product by that name already exists.</value>
  </data>
  <data name="ProductCategoryIsTooShort" xml:space="preserve">
    <value>Product category is too short</value>
  </data>
  <data name="ProductDescriptionIsTooShort" xml:space="preserve">
    <value>Product description is too short</value>
  </data>
  <data name="ProductsAreNull" xml:space="preserve">
    <value>Products are null.</value>
  </data>
  <data name="ProductSuccessfullyDeleted" xml:space="preserve">
    <value>Product successfully deleted.</value>
  </data>
  <data name="ProductSuccessfullyUpdated" xml:space="preserve">
    <value>Product successfully updated.</value>
  </data>
  <data name="ProductTitleIsTooShort" xml:space="preserve">
    <value>Product title is too short</value>
  </data>
  <data name="RegisteredSuccessfully" xml:space="preserve">
    <value>You have registered successfully.</value>
  </data>
  <data name="Russian" xml:space="preserve">
    <value>Russian</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="SignIn" xml:space="preserve">
    <value>SignIn</value>
  </data>
  <data name="SignUp" xml:space="preserve">
    <value>SignUp</value>
  </data>
  <data name="SortingProducts" xml:space="preserve">
    <value>Sorting Products</value>
  </data>
  <data name="Task" xml:space="preserve">
    <value>Task</value>
  </data>
  <data name="ThePriceOfAProductCannotBeLessThan0" xml:space="preserve">
    <value>The price of a product cannot be less than 0</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="Up" xml:space="preserve">
    <value>Up</value>
  </data>
  <data name="UpdatedSuccessfully" xml:space="preserve">
    <value>You have updated successfully.</value>
  </data>
  <data name="UserAlreadyExist" xml:space="preserve">
    <value>User already exist.</value>
  </data>
  <data name="UserCreationFailed" xml:space="preserve">
    <value>User creation failed.</value>
  </data>
  <data name="UserDeleted" xml:space="preserve">
    <value>User successfully deleted.</value>
  </data>
  <data name="UserDeletionError" xml:space="preserve">
    <value>User deletion error.</value>
  </data>
  <data name="UserIsLockedOut" xml:space="preserve">
    <value>User is locked out.</value>
  </data>
  <data name="UserUpdateError" xml:space="preserve">
    <value>User update error.</value>
  </data>
</root>